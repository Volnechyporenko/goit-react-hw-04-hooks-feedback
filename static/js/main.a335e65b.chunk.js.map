{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","components/App.js","index.js","components/FeedbackOptions/FeedbackOptions.module.css"],"names":["Statistics","props","good","neutral","bad","total","positivePercentage","FeedbackOptions","onClick","options","map","option","className","s","button","Section","title","children","Notification","message","App","useState","setGood","setNeutral","setBad","increment","prev","countTotalFeedback","Math","round","ReactDOM","render","document","getElementById","module","exports"],"mappings":"4MAuBeA,EArBI,SAAAC,GAAU,IACnBC,EAAkDD,EAAlDC,KAAMC,EAA4CF,EAA5CE,QAASC,EAAmCH,EAAnCG,IAAKC,EAA8BJ,EAA9BI,MAAOC,EAAuBL,EAAvBK,mBACnC,OACE,gCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,W,gBCMSC,EAbS,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,QACzB,OADgD,EAAdC,QACnBC,KAAI,SAAAC,GAAM,OACvB,wBAAQC,UAAWC,IAAEC,OAAqBN,QAAS,kBAAMA,EAAQG,IAAjE,SACGA,GAD+BA,OCWvBI,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,gCACE,6BAAKD,IACJC,MCIQC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCwDEC,EArDH,WAAO,IAAD,EACQC,mBAAS,GADjB,mBACTnB,EADS,KACHoB,EADG,OAEcD,mBAAS,GAFvB,mBAETlB,EAFS,KAEAoB,EAFA,OAGMF,mBAAS,GAHf,mBAGTjB,EAHS,KAGJoB,EAHI,KAKVC,EAAY,SAAAC,GAAI,OAAIA,EAAO,GAkB3BC,EAAqB,kBAAMzB,EAAOC,EAAUC,GAI5CC,EAAQsB,IACd,OACE,gCACE,cAAC,EAAD,CAASX,MAAM,wBAAf,SACE,cAAC,EAAD,CACER,QAzBY,SAAAG,GAClB,OAAQA,GACN,IAAK,OACHW,EAAQG,GACR,MACF,IAAK,UACHF,EAAWE,GACX,MACF,IAAK,MACHD,EAAOC,GACP,MACF,QACE,SAcEhB,QAAS,CAAC,OAAQ,UAAW,WAGjC,cAAC,EAAD,CAASO,MAAM,aAAf,SACGX,EACC,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAjBRsB,KAAKC,MAAM3B,GAAQ,IAAMyB,OAA0B,IAoB7C,cAAC,EAAD,CAAcR,QAAQ,4BC/ChCW,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U,kBCJjDC,EAAOC,QAAU,CAAC,OAAS,mC","file":"static/js/main.a335e65b.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Statistics = props => {\n  const { good, neutral, bad, total, positivePercentage } = props;\n  return (\n    <div>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage}%</p>\n    </div>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.css';\n\nconst FeedbackOptions = ({ onClick, options }) => {\n  return options.map(option => (\n    <button className={s.button} key={option} onClick={() => onClick(option)}>\n      {option}\n    </button>\n  ));\n};\n\nFeedbackOptions.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <div>\n      <h2>{title}</h2>\n      {children}\n    </div>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import { useState } from 'react';\nimport Statistics from './Statistics/Statistics';\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\nimport Section from './Section/Section';\nimport Notification from './Notification/Notification';\n\nconst App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const increment = prev => prev + 1;\n\n  const handleClick = option => {\n    switch (option) {\n      case 'good':\n        setGood(increment);\n        break;\n      case 'neutral':\n        setNeutral(increment);\n        break;\n      case 'bad':\n        setBad(increment);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => good + neutral + bad;\n\n  const countPositiveFeedbackPercentage = () =>\n    Math.round(good * (100 / countTotalFeedback())) || 0;\n  const total = countTotalFeedback();\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          onClick={handleClick}\n          options={['good', 'neutral', 'bad']}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        {total ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__gjVPa\"};"],"sourceRoot":""}